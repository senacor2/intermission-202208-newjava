openapi: 3.0.3
info:
  title: Intermission New Java
  description: Test API
  version: 1.0.0
servers:
  - description: Local Server
    url: http://localhost:{port}
    variables:
      port:
        default: '8081'
tags:
  - name: customer
  - name: account
paths:
  /customers:
    post:
      operationId: createCustomer
      summary: Creates a customer
      tags:
        - customer
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateCustomer'
      responses:
        201:
          description: Created customer.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Customer'
  /customers/{customerUuid}:
    delete:
      operationId: deleteCustomer
      summary: Deletes a customer
      tags:
        - customer
      parameters:
        - $ref: '#/components/parameters/CustomerUuid'
      responses:
        204:
          description: Deleted.
  /customers/{customerUuid}/accounts:
    get:
      operationId: getAllAccounts
      summary: Gets all accounts of a customer.
      tags:
        - customer
      parameters:
        - $ref: '#/components/parameters/CustomerUuid'
      responses:
        200:
          description: Ok.
          content:
            'application/json':
              schema:
                type: array
                items:
                  type: string
                  format: uuid
    post:
      operationId: createAccount
      summary: Creates an account for a customer.
      tags:
        - customer
      parameters:
        - $ref: '#/components/parameters/CustomerUuid'
      responses:
        201:
          description: Created.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Account'
  /accounts/{accountUuid}:
    get:
      operationId: getAccount
      summary: Gets an account.
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/AccountUuid'
      responses:
        200:
          description: Ok.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Account'
  /accounts/{accountUuid}/transactions:
    get:
      operationId: getAllTransactions
      summary: Get all transactions of an account.
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/AccountUuid'
      responses:
        200:
          description: Ok.
          content:
            'application/json':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
    post:
      operationId: createTransaction
      summary: Create a transaction.
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/AccountUuid'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateTransaction'
      responses:
        201:
          description: Created.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Transaction'
  /accounts/{accountUuid}/transactions/instant:
    post:
      operationId: createInstantTransaction
      summary: Create a transaction and wait for booking.
      tags:
        - account
      parameters:
        - $ref: '#/components/parameters/AccountUuid'
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/CreateTransaction'
      responses:
        201:
          description: Created.
          content:
            'application/json':
              schema:
                $ref: '#/components/schemas/Transaction'

components:
  parameters:
    CustomerUuid:
      in: path
      name: customerUuid
      required: true
      description: Customer UUID.
      schema:
        type: string
        format: uuid
    AccountUuid:
      in: path
      name: accountUuid
      required: true
      description: Account UUID.
      schema:
        type: string
        format: uuid
  schemas:
    CreateCustomer:
      type: object
      required:
        - prename
        - lastname
        - dateOfBirth
      properties:
        prename:
          type: string
          minLength: 2
          maxLength: 250
          example: John
        lastname:
          type: string
          minLength: 2
          maxLength: 250
          example: Doe
        dateOfBirth:
          type: string
          format: date
    Customer:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        prename:
          type: string
          example: John
        lastname:
          type: string
          example: Doe
        dateOfBirth:
          type: string
          format: date
    Account:
      type: object
      properties:
        uuid:
          type: string
          format: uuid
        accountNumber:
          type: string
          example: '123'
        iban:
          type: string
          example: 'DE00000000000000000123'
        balanceInCents:
          type: integer
          example: 133700
    CreateTransaction:
      type: object
      required:
        - receiverIban
        - amountInCents
      properties:
        receiverIban:
          type: string
          example: 'DE00000000000000000123'
        amountInCents:
          type: integer
          minimum: 1
          example: 123
        transactionDate:
          type: string
          format: date-time
        description:
          type: string
          maxLength: 250
    TransactionStatus:
      type: string
      enum:
        - INITIAL
        - PENDING
        - BOOKED
        - REJECTED
    Transaction:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/TransactionStatus'
        senderIban:
          type: string
          example: 'DE00000000000000000321'
        receiverIban:
          type: string
          example: 'DE00000000000000000123'
        amountInCents:
          type: integer
          example: 123
        transactionDate:
          type: string
          format: date-time
        description:
          type: string